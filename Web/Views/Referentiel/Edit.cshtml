@model object
@using Web.Models
 
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm())
{
    if (ViewData != null && ViewData.Model != null)
    {
        @Html.Hidden("objectType", ViewData.Model.GetType().AssemblyQualifiedName)
        @Html.Label("objectType ="+ ViewData.Model.GetType())
    }
    @Html.ValidationSummary(true)
    <table cellpadding="0" cellspacing="0" border="0">
        @foreach (var prop in ViewData.ModelMetadata.Properties.Where(pm => pm.ShowForEdit && !ViewData.TemplateInfo.Visited(pm)))
        {
            if (prop.HideSurroundingHtml)
            {
                <span style="border:solid 1px red;">acid</span>                
                @Html.Editor(prop.PropertyName)
            }
            else
            {
                <tr>
                    <td>
                        <div class="editor-label" style="text-align: right;">
                            @(prop.IsRequired ? "*" : "")
                            @Html.Label(prop.PropertyName)                        
                        </div>
                    </td>
                    <td>
                        <div class="editor-field">                           
                            @if (prop.TemplateHint == "DropDownList" && prop.AdditionalValues.ContainsKey("SourcePropertyName"))
                            {
                                @Html.GenericDropDownList(prop.PropertyName);
                            }
                            else
                            {
                                @Html.Editor(prop.PropertyName)
                                @Html.ValidationMessage(prop.PropertyName, "*")
                            }
                        </div>
                    </td>
                </tr>
            }
        }
        <p>
            <input type="submit" value="Save" />
        </p>
    </table>    
}
           
